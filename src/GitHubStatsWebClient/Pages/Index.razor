@page "/"
@using System.Text.Encodings.Web
@using System.Net
@inject HttpClient Http

<PageTitle>Index</PageTitle>

<label for="basic-url">Enter GitHub User Name</label>
<div class="input-group mb-3 w-75">
    <div class="input-group-prepend">
        <span class="input-group-text" id="basic-addon3">https://api.github.com/users/</span>
    </div>
    <input type="text" @bind="_username" class="form-control" id="basic-url" aria-describedby="basic-addon3">
    <button type="button" class="btn btn-primary" @onclick="InvokeApi">Find Stats For User</button>
</div>

@if (_response is not null && _problem is null)
{
    <ul class="list-group list-group-flush w-75">
        <li class="list-group-item"><b>@_response?.Name</b> is located in <b>@_response?.GeoLocation</b>,</li>
        <li class="list-group-item">was last active on <b>@_response?.LastActivity</b>,</li>
        <li class="list-group-item">has <b>@_response?.PublicRepositories public repositories</b>, and <b>@_response?.NumberOfFollowers followers</b>.</li>
    </ul>
}
@if (_problem is not null)
{
    <div class="alert alert-danger" role="alert">
        <strong>@_problem.Status</strong> @_problem.Title <i>@_problem.Detail</i>
    </div>
}

@* TODO: Add telemetry viewer here *@

@code
{
    private string? _username;
    private StatsResponse? _response;
    private Problem? _problem;

    async Task InvokeApi()
    {
        _response = null;
        _problem = null;

        var response = await Http.GetAsync($"/api/stats/{UrlEncoder.Default.Encode(_username ?? string.Empty)}");
        if (response is { IsSuccessStatusCode: false })
        {
            _problem = await response.Content.ReadFromJsonAsync<Problem>();
            return;
        }

        try
        {
            _response = await response.Content.ReadFromJsonAsync<StatsResponse?>();
        }
        catch
        {
            _problem = new Problem("No data", 400, "There was nothing returned. Are you sure the user exists?");
            _response = null;
        }
    }

    public record StatsResponse(string? Name, string? GeoLocation, int? PublicRepositories, int? NumberOfFollowers, DateTime? LastActivity);

    public record Problem(string Title, int Status, string Detail);
}